from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext
import logging

# Enable logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# Define the start command handler
def start(update: Update, context: CallbackContext) -> None:
    update.message.reply_text(
        "What is Finder?\n\n"
        "FINDER is a bot that filters through 20,000 daily Solana coin launches to find the ones most likely to skyrocket. It uses data from volume, wallets, social media, and coin characteristics to make accurate predictions.\n\n"
        "Disclaimer:\n\n"
        "Predictions generated by Finder are derived from proprietary algorithms and data analysis, and while we strive for accuracy, they are not guaranteed to always generate high levels of returns. We encourage users to consider our predictions as supplementary information alongside their own research, experience, and judgment. It is important not to solely rely on Finder's predictions for decision-making.\n\n"
        "I have read and I understand the disclaimer.",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("I agree", callback_data='agree')]])
    )

# Define the callback query handler for the "I agree" button
def button(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    query.answer()

    if query.data == 'agree':
        query.edit_message_text(
            "To access Finder, you must:\n\n"
            "❌ Join @findertrending\n"
            "❌ Join @gemfindercoinofficial\n"
            "❌ Join @finderhelp\n\n"
            "Please Note:\n"
            "@gemfindercoinofficial is a portal to the group, you must join the actual group using the portal.\n\n"
            "Once you join all the groups click the Verify Join button below.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("Verify Join", callback_data='verify')]])
        )

    elif query.data == 'verify':
        query.edit_message_text("Verification process not implemented yet.")

# Define the main function to set up the bot
def main() -> None:
    # Replace 'YOUR_TOKEN' with your bot's API token
    updater = Updater("7403868510:AAEGOzq4eQ5HnGzfoh5hxoI5JWze9yBfl8M")

    dispatcher = updater.dispatcher

    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CallbackQueryHandler(button))

    # Start the Bot
    updater.start_polling()

    # Run the bot until you press Ctrl-C or the process receives SIGINT, SIGTERM or SIGABRT
    updater.idle()

if __name__ == '__main__':
    main()
